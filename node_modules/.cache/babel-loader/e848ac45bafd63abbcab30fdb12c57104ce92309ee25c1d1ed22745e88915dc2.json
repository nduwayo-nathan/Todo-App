{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.buildDynamicImport = buildDynamicImport;\nexports.getDynamicImportSource = getDynamicImportSource;\nvar t = require(\"@babel/types\");\nvar _template = require(\"@babel/template\");\nfunction getDynamicImportSource(node) {\n  const [source] = node.arguments;\n  return t.isStringLiteral(source) || t.isTemplateLiteral(source) ? source : _template.default.expression.ast`\\`\\${${source}}\\``;\n}\nfunction buildDynamicImport(node, deferToThen, wrapWithPromise, builder) {\n  const [specifier] = node.arguments;\n  if (t.isStringLiteral(specifier) || t.isTemplateLiteral(specifier) && specifier.quasis.length === 0) {\n    if (deferToThen) {\n      return _template.default.expression.ast`\n        Promise.resolve().then(() => ${builder(specifier)})\n      `;\n    } else return builder(specifier);\n  }\n  const specifierToString = t.isTemplateLiteral(specifier) ? t.identifier(\"specifier\") : t.templateLiteral([t.templateElement({\n    raw: \"\"\n  }), t.templateElement({\n    raw: \"\"\n  })], [t.identifier(\"specifier\")]);\n  if (deferToThen) {\n    return _template.default.expression.ast`\n      (specifier =>\n        new Promise(r => r(${specifierToString}))\n          .then(s => ${builder(t.identifier(\"s\"))})\n      )(${specifier})\n    `;\n  } else if (wrapWithPromise) {\n    return _template.default.expression.ast`\n      (specifier =>\n        new Promise(r => r(${builder(specifierToString)}))\n      )(${specifier})\n    `;\n  } else {\n    return _template.default.expression.ast`\n      (specifier => ${builder(specifierToString)})(${specifier})\n    `;\n  }\n}","map":{"version":3,"names":["t","require","_template","getDynamicImportSource","node","source","arguments","isStringLiteral","isTemplateLiteral","default","expression","ast","buildDynamicImport","deferToThen","wrapWithPromise","builder","specifier","quasis","length","specifierToString","identifier","templateLiteral","templateElement","raw"],"sources":["/home/nathan/Documents/project/node_modules/@babel/helper-module-transforms/src/dynamic-import.ts"],"sourcesContent":["// Heavily inspired by\n// https://github.com/airbnb/babel-plugin-dynamic-import-node/blob/master/src/utils.js\n\nimport * as t from \"@babel/types\";\nimport template from \"@babel/template\";\n\n// TODO(Babel 8): Remove this\nexport function getDynamicImportSource(\n  node: t.CallExpression,\n): t.StringLiteral | t.TemplateLiteral {\n  const [source] = node.arguments;\n\n  return t.isStringLiteral(source) || t.isTemplateLiteral(source)\n    ? source\n    : (template.expression.ast`\\`\\${${source}}\\`` as t.TemplateLiteral);\n}\n\nexport function buildDynamicImport(\n  node: t.CallExpression,\n  deferToThen: boolean,\n  wrapWithPromise: boolean,\n  builder: (specifier: t.Expression) => t.Expression,\n): t.Expression {\n  const [specifier] = node.arguments;\n\n  if (\n    t.isStringLiteral(specifier) ||\n    (t.isTemplateLiteral(specifier) && specifier.quasis.length === 0)\n  ) {\n    if (deferToThen) {\n      return template.expression.ast`\n        Promise.resolve().then(() => ${builder(specifier)})\n      `;\n    } else return builder(specifier);\n  }\n\n  const specifierToString = t.isTemplateLiteral(specifier)\n    ? t.identifier(\"specifier\")\n    : t.templateLiteral(\n        [t.templateElement({ raw: \"\" }), t.templateElement({ raw: \"\" })],\n        [t.identifier(\"specifier\")],\n      );\n\n  if (deferToThen) {\n    return template.expression.ast`\n      (specifier =>\n        new Promise(r => r(${specifierToString}))\n          .then(s => ${builder(t.identifier(\"s\"))})\n      )(${specifier})\n    `;\n  } else if (wrapWithPromise) {\n    return template.expression.ast`\n      (specifier =>\n        new Promise(r => r(${builder(specifierToString)}))\n      )(${specifier})\n    `;\n  } else {\n    return template.expression.ast`\n      (specifier => ${builder(specifierToString)})(${specifier})\n    `;\n  }\n}\n"],"mappings":";;;;;;;AAGA,IAAAA,CAAA,GAAAC,OAAA;AACA,IAAAC,SAAA,GAAAD,OAAA;AAGO,SAASE,sBAAsBA,CACpCC,IAAsB,EACe;EACrC,MAAM,CAACC,MAAM,CAAC,GAAGD,IAAI,CAACE,SAAS;EAE/B,OAAON,CAAC,CAACO,eAAe,CAACF,MAAM,CAAC,IAAIL,CAAC,CAACQ,iBAAiB,CAACH,MAAM,CAAC,GAC3DA,MAAM,GACLH,SAAA,CAAAO,OAAQ,CAACC,UAAU,CAACC,GAAI,QAAON,MAAO,KAA0B;AACvE;AAEO,SAASO,kBAAkBA,CAChCR,IAAsB,EACtBS,WAAoB,EACpBC,eAAwB,EACxBC,OAAkD,EACpC;EACd,MAAM,CAACC,SAAS,CAAC,GAAGZ,IAAI,CAACE,SAAS;EAElC,IACEN,CAAC,CAACO,eAAe,CAACS,SAAS,CAAC,IAC3BhB,CAAC,CAACQ,iBAAiB,CAACQ,SAAS,CAAC,IAAIA,SAAS,CAACC,MAAM,CAACC,MAAM,KAAK,CAAE,EACjE;IACA,IAAIL,WAAW,EAAE;MACf,OAAOX,SAAA,CAAAO,OAAQ,CAACC,UAAU,CAACC,GAAI;AACrC,uCAAuCI,OAAO,CAACC,SAAS,CAAE;AAC1D,OAAO;IACH,CAAC,MAAM,OAAOD,OAAO,CAACC,SAAS,CAAC;EAClC;EAEA,MAAMG,iBAAiB,GAAGnB,CAAC,CAACQ,iBAAiB,CAACQ,SAAS,CAAC,GACpDhB,CAAC,CAACoB,UAAU,CAAC,WAAW,CAAC,GACzBpB,CAAC,CAACqB,eAAe,CACf,CAACrB,CAAC,CAACsB,eAAe,CAAC;IAAEC,GAAG,EAAE;EAAG,CAAC,CAAC,EAAEvB,CAAC,CAACsB,eAAe,CAAC;IAAEC,GAAG,EAAE;EAAG,CAAC,CAAC,CAAC,EAChE,CAACvB,CAAC,CAACoB,UAAU,CAAC,WAAW,CAAC,CAAC,CAC5B;EAEL,IAAIP,WAAW,EAAE;IACf,OAAOX,SAAA,CAAAO,OAAQ,CAACC,UAAU,CAACC,GAAI;AACnC;AACA,6BAA6BQ,iBAAkB;AAC/C,uBAAuBJ,OAAO,CAACf,CAAC,CAACoB,UAAU,CAAC,GAAG,CAAC,CAAE;AAClD,UAAUJ,SAAU;AACpB,KAAK;EACH,CAAC,MAAM,IAAIF,eAAe,EAAE;IAC1B,OAAOZ,SAAA,CAAAO,OAAQ,CAACC,UAAU,CAACC,GAAI;AACnC;AACA,6BAA6BI,OAAO,CAACI,iBAAiB,CAAE;AACxD,UAAUH,SAAU;AACpB,KAAK;EACH,CAAC,MAAM;IACL,OAAOd,SAAA,CAAAO,OAAQ,CAACC,UAAU,CAACC,GAAI;AACnC,sBAAsBI,OAAO,CAACI,iBAAiB,CAAE,KAAIH,SAAU;AAC/D,KAAK;EACH;AACF"},"metadata":{},"sourceType":"script","externalDependencies":[]}